
Содержание " Методическая поддержка для разработчиков и администраторов 1С:Предприятия 8"{
Разработчикам{
Платформа, механизмы и технологии{
Вопросы - ответы{
	Зачем нужен тонкий клиент, если толстый клиент умеет работать в управляемом режиме?
	Зачем нужен тонкий клиент, если есть веб-клиент?
	Где находятся Интерфейсы в 8.2?
	Почему нет меню "Операции"?
	Зачем нужны модули менеджеров прикладных объектов?
	Почему мой справочник не видно в интерфейсе?
	Не могу найти шаблоны конфигураций 8.1. Почему они не отображаются в списке шаблонов?
}
Методические рекомендации по конфигурированию
Демонстрационные конфигурации
Технология создания внешних компонент
}
Дополнительные средства разработки: библиотеки, обработки, руководства
Универсальные механизмы в типовых конфигурациях (режим обычного приложения)
Технологические вопросы крупных внедрений
Обмен данными, прикладные технологии
"1С:Документооборот" для разработчика
Диагностика и исправление проблем	
}
Администраторам
Разработчикам, администраторам, платформа 8.1
Новые и измененные разделы (Июль 2018 г.)
}

План видов характеристик{
	
	Возможная ситуация{
	Идут продажи, сначало продали "синий стул", потом "красный стул", потом надо создать "зеленый стул", потом просто "стул" продали. Так тяжело анализировать продажи. В названии пишут кратко название, а все дополнительные характеристики и плане видов характеристик.
	Если создать подчиненный справочник - то будет проблема с типами. Пользователь хочет ввести дату, а там реквизит число.
	Список таких свойств (далее будем называть их характеристиками) во время разработки не определен ни по составу, ни по типу хранимых данных.
	}
	
	В сущности, план видов характеристик очень напоминает справочник, однако имеет более узкую «специализацию»: хранит, по сути, информацию только о том, какими видами характеристик может описываться какой-либо объект базы данных.
	В пвх только возможные свойсва перечислены, а связка свойство- значение храниться в регистре сведений.
	В плане характеристик имя характеристики, а её конкретные разновидности в справочнике.

	В плане пишем наименование и код, можем добавить реквизиты и табличную часть.
	В справочнике, устанавливаем владельцем план видов характеристик.

	


Храним данные в регистре сведений{
Создаем справочник:
	Пустой без ничего. Создали и забили. Больше он не понадобиться.
Создаем план видов характеристик:
	В типе значения характеристик выбираем нужные типы.
Создаем регистр сведений:
	измерение Объект - ссылка на справочник, ведущее.
	измерение План - ссылка на план видов характеристик
	ресурс ЗначениеХарактеристики - ссылка на ХАРАКТЕРИСТИКУ плана, не на сам план, а на характеристику плана. Ну и ставим очищение, при смене плана. И связь по типу с измерением плана
В созданном плане видов характеристик идем в характеристики и делаем:
	Левая колонка виды характеристик:
		Вид характеристик: - этот же план видов характеристик.
		Поле ключа - ссылка.
		Поле отбора видов не трогаем - оно пустое.
		Значение отбора видов не трогаем - оно пустое.
	Правая колонка значения характеристик:
		Значения характеристик - регистр сведений
		Поле объекта - измерение этого регистра с ссылкой на план видов характеристик - "План"
		Поле вида - как и поле объекта.
		Поле значения - ресурс содержащий Характеристику плана видов характеристик.
}

Для тех объектов метаданных, для которых планируется вести учет характеристик 
	(Для документа, справочника, плана видов характеристик или плана счетов, плана видов расчета,бизнесПроцесса который хотим связать с планом видов характеристик )
можем редактировать: характеристики. У региста сведений их нет. У регистра накопления и бухгалтерии тоже. В общем у большинства объектов они есть, а у регистров их нет.

Нажав на характеристики откроется окно "Дополнительные характеристики объекта метаданных".
В левой части, где виды характеристик - там указываются правила отбора видов характеристик.
А в правой, где значения характеристик - способ хранения значений характеристик.

В правилах отбора указываются правила для конкретного объекта данных, по которым система выполняет получение списка видов характеристик.
В правилах получения значений указывается, как получить значение характеристики, зная объект данных и вид характеристики.

План видов характеристик - в нем описаны виды характеристик. Каждый вид характеристики минимум имеет наименование и тип значения.

Даем пользователю механизм позволяющий произвольным образом описывать материалы и вести учет в разрезе этих описаний. План видов характеристик не имеет внутренних механизмов привязки вида характеристики к объекту, который должен их описывать. Как хранить сооветствие характеристики к конкретному объекту базы решает разработчик.

Можно у объекта или прямо в отчете в запросе установить характеристики{
	Характеристики нужны чтобы в отчете можно было делать отбор по этим характеристикам, допустим отобрать тапки у которых вид характеристик "Цвет"=="Зеленый".
	В запросе можно или таблицы выбрать, или вручную запрос выбрать или написать.
	
	Там выбираем план, который связан с этим объектом- ссылку на этот план указываем.
	А слево то, что связывает эти объекты - регистр сведений.
		поле объекта- ссылка на этот объект.
		поле вида - ссылка на план
		поле значение- значение, которое в нем храниться.
	
	ПРОБЛЕМА: если вручную пишу запрос, ставлю тип номеклатура- все в порядке.
	Тип номеклатура, потом из пвх и регистр сведений - все идеально работает.
	А если вручную через характеристики объекта- ни один запрос не работает. Они видят тип число, а это ссылка на справочник подчиненных пвх. Длину видит как число, а цвет как строку, но это все храниться в справочнике подчиненном пвх.
}

Пробую сам лапками{
	
Первая загвозка- привязка к номенклатуре.{
Создал справочник номенклатура
План видов характеристик
Подчиненный пвх справочник.

Допустим открываю пвх и создаю там вид свойства "Цвет", перехожу в подчиненный справочник и создаю там: "Красный", "Синий", "Багровый". И что? Теперь у пвх "Цвет" есть три подчиненных элемента. Как привязать их к номенклатуре непонятно.
}
Исправление первой загвоздки и вторая загвозка{
	Создал справочник номеклатура
	ПВХ
	подчиненный пвх справочник
	независимый непереодичный регистр сведений:
		измерение номенклатура ведущее
		измерение пвх
		ресурс характеристика пвх
Теперь для любой номенклатуры можно перейти в регистр и из него указать одну характеристику по каждому виду. Допустим создать Номенклатуру "Тапок" и подчиненный ему вид характеристики "Цвет" и выбрать один из цветов: допустим "Красный". И вот у нас есть "Тапок" с характеристикой "Цвет" - "Красный". Но возникает вопрос- где типы? Я же использую справочник для хранения цветов. Причем тут вообще типы?
}

Исправление второй загвоздки и третья загвоздка{
	Создал справочник номенклатура
	ПВХ
	НЕ СОЗДАЕМ подчиненный пвх справочник - будем значения в регистре хранить.
	независисый непереодический регистр сведений:
		измерение номеклатура
		измерение пвх
		ресурс характеристика хвх.
Если не привязывать к пвх справочник, то значения характеристик будут в регистре прямо и храниться. Чисто характеристику не получить, её нет. Она нигде не храниться. Просто записывается в регистр для определенной номеклатуры и все. Допустим увидеть список цветов нельзя, но если дать "Цвет" тип строка, то можно будет ручками для "Тапок" написать в регистре сведений "Цвет" -"красный" или "зеленый", заранее цветов для "Цвет" не создать. Вопрос так с типом и решился-какой тип у пвх указан, такой тип можно и установить для ресурса характеристики.
Но неудобно-нужны список и типы.
}
Исправление третий загвоздки - идеальный вариант{
	Создаем справочник номеклатура
	ПВХ
	подчиненных пвх справочник с реквизитом "характеристика" равным характеристика пвх который зависит по типу от владельца, длина кода 0, длина наименования 0, меняем представление на значение реквизита "характеристика" (иначе будем получать "<>" каждый раз в ссылке).
	непереодический независисый регистр сведений
		измерение номеклатура
		измерение пвх
		ресурс ПОДЧИНЕННЫЙ СПРАВОЧНИК пвх. Не характеристика, а справочник.
Значения для пвх создаются в справочнике. У справочника только один реквизит, который принимает тип от пвх. Если у пвх число, то в этом справочнике можно только числа хранить. Так можно создать "Цвет" и несколько цветов, потом "Длину" и числами задать её. И регистром связываем их вместе.
}

}

Если в регистре сведений хранить значение, в ресурсе, давном характеристике, то проблем нет. А если ресурс это справочник, то будет проблема с отбором- нельзя у справочника номенклатура через доп свойства метаданных установить правила для отчета.

Понял, почему у меня было проблема с типами. Если тип число- он храниться для этого объекта к регистре сведений, а если это допустим "Цвет", то его запихиваем в справочник, тогда у тип ресурса будет ссылка на справочник и можно будет отбором вытаскивать. Конкретно число нет особого смысла запихивать в справочник. Не будет же справочник для чисел от 1 до 100, если длины разные. Оно сразу в ресурсе регистра сведений будет сохранено.









	
}

Бух учет{
Регистр бухгалтерии типо регистра накопления, только с особенностями:
	1-связь с планом счетов и поддержка двойной записи (дебит и кредит):
	Если регистр бухгалтерии имеет корреспонденцию:
		у него есть реквизиты СчетДТ и счетКТ
	Если не поддерживает корреспонденцию:
		у него есть реквизит счет
		
Са́льдо (итал. saldo — расчёт, остаток) — разность между поступлениями и расходами за определённый промежуток времени.
Кредитовый оборот активного счета за некоторый период можно толковать как стоимость списанных ценностей в этом периоде. Кредитовое сальдо активного счета обычно говорит об ошибке учета.
Кредитовое сальдо пассивного счета на некоторую дату, если речь идет о счете учета задолженности, говорит нам о сумме нашего долга.

Двойная запись подразумевает отражение каждой операции по дебету одного счета (строго говоря – одного или нескольких счетов) и по кредиту другого (опять же – одного или нескольких). По дебету и кредиту отражается один и тот же показатель, в итоге сумма оборотов по дебету всех счетов равна сумме оборотов по кредиту всех счетов.

Дебиторская задолженность: сумма долгов, причитающихся предприятию, фирме, компании со стороны других предприятий, фирм, компаний, а также граждан, являющихся их должниками, дебиторами.
Кредиторская задолженность -  задолженность субъекта (предприятия, организации, физического лица) перед другими лицами, которую этот субъект обязан погасить.

Дебиторская задолженность-мне должны.
Кредиторская задолженность -я должен.

1-:	Активные счета бухгалтерского учета отвечают за состояние имущества предприятия и его внешние долги. Можно сказать, что на активных бухгалтерских счетах ведется учет движения активов предприятия. На активных счетах отображена информация о средствах (в денежном эквиваленте), которые имеются в распоряжении организации, это могут быть банковские счета, имущество на складе и в эксплуатации.
На активных счетах:
	Начальное сальдо записывается по "дебету" счёта
	Записи, характеризующие "увеличение" хозяйственных средств записываются по "дебету" счёта
	Записи, характеризующие "уменьшение" хозяйственных средств записываются по "кредиту" счёта
	Конечное сальдо записывается "по дебету" счёта

2:- Пассивные бухгалтерские счета предназначены для учета источников формирования имущества и обязательств организации перед сторонними партнерами, сотрудниками, государством и даже владельцем компании. 
На пассивных счетах:
	Начальное сальдо записывается по "кредиту" счёта
	Записи, характеризующие "увеличение" источника средств записываются по "кредиту" счёта
	Записи, характеризующие "уменьшение" источника средств записываются по "дебету" счёта
	Конечное сальдо записывается "по кредиту" счёта
	
	
Существует два вида счетов: активные и пассивные. 
Пассивные — это привлечённые средства; активные — размещённые средства компании, предприятия или банка. 
	Для активных счетов: дебет — приход, кредит — расход средств. дебет отражает приход: поступление вложений, средств, материальных ценностей, задолженности перед предприятием. кредит, наоборот, показывает уменьшение имущества предприятия и расход хозяйственных средств.
	Для пассивных: кредит — приход, дебет — расход.	дебет отображает расход фондов, уменьшение капитала, прибыли. кредит отображает приход: увеличение прибыли, капитала, поступление средств, возврат кредитов, долгов.
	
Де́бет и кре́дит — части бухгалтерской проводки. В кредит записывается источник средств, в дебет — получатель.
Для приходных операций отведена левая колонка счета (это дебет), а для расходных операций– правая колонка (кредит).
	
дебет активного счета отображает приход, поступление средств, вложений, задолженности перед предприятием (дебиторской задолженности), а кредит, наоборот, расход, уменьшение средств, дебиторской задолженности, вложений. Сальдо по активному счету бывает только положительное – дебетовым и не может быть отрицательным:
«Касса» – №50. По дебету счета отображают поступление средств в кассу – выручки, например. По кредиту счета, соответственно, отображается расход денег по кассе – на заработную плату работникам, для расчетов с поставщиками и др. Сальдо на таком счете не может быть кредитовым. То есть, либо деньги есть, а это дебетовый остаток, либо остаток равен нулю – все, что поступило в течение месяца, или было в кассе на начало месяца, выдано.	


Активно-пассивные счета:
	Оборот по дебету: увеличение дебиторской задолженности; уменьшение кредиторской задолженности
	Оборот по кредиту: увеличение кредиторской задолженности; уменьшение дебиторской задолженности
	дебит - получение прибыли
	кредит- увеличение долгов, оплата расходов.

Деньги поступают от покупателя на р/с, при этом уменьшается дебиторская задолженность покупателя и увеличивается количество денежных средств на р/с. Если деньги поступают на р/с, то их там становится больше, а увеличение денежных средств (актива предприятия) мы отражаем по дебету. То есть сумму нужно внести в дебет 51. Поступают деньги от покупателя, при этом уменьшается дебиторская задолженность покупателя, дебиторская задолженность – это также актив предприятия, уменьшение актива отражается по кредиту. То есть сумму необходимо занести в кредит 62. Все логично, деньги поступили со сч. 62 на сч. 51 (от покупателя на р/с).
-----------------
|	ДТ	|	КТ	|
|	51	|	62	|
-----------------

Получение денежных средств в кассу со счетов в банке:
-----------------
|	ДТ	|	КТ	|
|	50	|	51	|
-----------------
Выдача заработной платы из кассы:
50 в кассе уменьшилось: касса это активный, значит по кредету.
70 счет пассивный, или активно-пассивный - они получили прибыль-у них приход, им должны- увеличение дебиторской задолженности- дебит.
-----------------
|	ДТ	|	КТ	|
|	70	|	50	|
-----------------

Упрощенный пример:
-------------------------------------------------------------------------------------
Название счета	|	Код счета	|	Отношение к балансу	|	Аналитика				|
-------------------------------------------------------------------------------------
Материалы		|		10		|		Активный		|	Номенклатура, Сотрудник	|
-------------------------------------------------------------------------------------
Касса			|		50		|		Активный		|							|
-------------------------------------------------------------------------------------
Покупатели		|		62		|		Активный		|	Контрагент				|
-------------------------------------------------------------------------------------
Поставщики		|		60		|		Пассивный		|	Контрагент				|
-------------------------------------------------------------------------------------
Персонал		|		70		|		Пассивный		|	Сотрудник				|
-------------------------------------------------------------------------------------
Капитал			|		80		|		Пассивный		|							|
-------------------------------------------------------------------------------------
Д10 К60 – Поступили материалы от поставщика;
Д60 К50 – Оплачены материалы поставщику;
Д80 К70 – Начислена заработная плата сотрудникам;
Д70 К50 – Выплачена заработная плата сотрудникам;
Д62 К80 – Оказаны услуги покупателям;
Д50 К62 – Поступила выручка от покупателей;
Д80 К10 – Отпущены материалы в производство.

Субконто- аналитический разрез:	Учет на счетах может вестись в одном или нескольких аналитических разрезах. Например, для счета учета материалов вполне логично предусмотреть разрез Номенклатура, благодаря которому можно узнать, какие именно номенклатурные позиции учитываются на счете. Учет расчетов с контрагентами логично вести в разрезе самих контрагентов, а, возможно, и договоров с контрагентами, и валют. Аналитические разрезы принято, в терминологии 1С:Предприятие, называть субконто. Фразу "Субконто Номенклатура" следует понимать как "Аналитический разрез Номенклатура".





План видов характеристик. Его мы будем использовать для хранения видов аналитики (субконто), которые должны присутствовать у наших счетов. Ему прикрепим справочник: это позволит пользователю самостоятельно задавать необходимые ему аналитические разрезы, не прибегая к конфигурированию системы и настройке плана видов характеристик.
План счетов. Это основа бухгалтерской подсистемы. План счетов хранит описания счетов, на которых будет вестись учет.
Регистр бухгалтерии. Он связан с планом счетов и применяется для хранения бухгалтерских записей. 

План счетов по сути справочник. 
Есть доп реквизиты "Забалансовый" и "Порядок" и "Вид":
	Забалансовый- дополнительный предопределенный признак учета -счет забалансовый, ведется отдельно. Как и любой признак учета это булево.
	Признаки учета- может создать дополнительные признаки учета, по сути пара только:
		количественный
		валютный
	Остальные признаки учета и не придумаешь.
	"Вид" счета-системное перечисление. Имеет три значения:
		Активный
		Пассивный
		Активно-пассивный
	Вид счета влияет на то, как система будет читать остатки по счету. По счету система хранит данные одним числом, допустим счет 50 5000, а где она их запишет: дебет или кредит зависит от вида счета. Если счет активный и сумма положительная- она будет в дебите, если счет пассивный и сумма положителная- она с минусом окажется в кредите. При запросе остатков по счету, система сделает запрос к плану счетов, чтобы узнать вид счета.
Есть предопределенная табличная часть: "Виды субконто".


Создал два счета, один активный Активный1 и один пассивный пассивный1. Через ПолучитьСтруктуруХраненияБазыДанных() попробовал посмотреть, какая таблица к чему относится и что в них.
Для Плана счетов сформировались две таблицы:
	В одной:
CREATE TABLE public._acc49
	(
    _idrref bytea NOT NULL,
    _version integer NOT NULL DEFAULT 0,
    _marked boolean NOT NULL,
    _predefinedid bytea NOT NULL,
    _parentidrref bytea NOT NULL,
    _code mvarchar(9) NOT NULL,
    _description mvarchar(25) NOT NULL,
    _kind numeric(1,0) NOT NULL,
    _offbalance boolean NOT NULL,
    CONSTRAINT _acc49ng_pkey PRIMARY KEY (_idrref)
	)
Там в общем ид,
версия	0
пометка _marked false
_predefinedid и _parentidrref не знаю что это
код _code , я создал 01 код и 02, она так и выглядят.
_description - по идее наименование, у меня активный1 пассивный1. Так назвал два счета.
_kind 0 и 1, что это не пойму. 
булево забаланс, у обоих false.

А по регистру бухгалтерии сформировалось четыре таблицы:
	Основная,
	ИтогиПоСчетам
	ИтогиМеждуСчетами
	НастройкиХраненияИтоговРегистраБухгалтерии.
	
В НастройкиХраненияИтоговРегистраБухгалтерии что-то странное. Период, актуальный период, использованиеИтогов, минПериод, Юзерсплит и минимальныйВысчитываемый период.
В основной таблице-все идеально- обычная таблица:
	Период АктивныеЛи Какая-ТоССылка значение
	2018-08-01 21:40-16		1	истина	5
	2018-08-01 21:40-20		1	истина	15
	2018-08-01 21:40-22		1	Истина	26
Я такие данные: 5 в  одном документе, 15 в другом и 26 в третьем и ввел на счета: активный1 и пассивный1.
В итогах между счетами все пусто, не знаю зачем нужна.
А в ИтогахПОСчету все идельно:
	две записи, на одном 46 а на другой -46.



Поле порядок формируется через маску.
Возможно! Не проверял :С маской может быть забавная проблема- в управляемой форме маска задается в свойствах кода- открываем стандартные реквизиты, свойства кода и там ставим маску. А маска в плане счетов для управляемой формы нужна, чтобы сработала функция которая из кода сделает маску- получитьПорядокКода. - или можно перед записью написать: порядок=ПолучитьПорядокКода();

В реквизитах может быть дополнительная информация, типо полное наименование, корреспондирующие счета, название на английском...

Если поставить корреспондецию, то устанавливаешь просто:
	Движение.ВидДвижения = ВидДвиженияБухгалтерии.Дебет;
	Движение.Счет = ПланыСчетов.МПланСчетов.Активный1;
Однако, поддержка двойной записи и корреспонденции есть-если просто введешь дебет или кредит, или они не равны-выдаст ошибку. Придется в одном документе делать две записи, одинаковые. Одна на дебет, другая на кредет. Можно не с одного счета на другой перекидывать, а "один ко многим", главное чтобы сумма на дебите и кредите сошлась. Если допустим на дебите будет 100, а на кредите 70 и 30 то все работает: 100 на 100, а если на дебите 100 а на кредите 70 и 40, то будет надпись: "Запись не верна! Нарушен баланс".
Например 1 к двум{
	Движения.РегистрБухгалтерии1.Записывать = Истина;
	Движение = Движения.РегистрБухгалтерии1.Добавить();
	Движение.Счет=ПланыСчетов.МПланСчетов.Активный1;
	Движение.ВидДвижения=ВидДвиженияБухгалтерии.Дебет;
	Движение.Период = Дата;
	Движение.МКоличество = 100;
	
	Движение = Движения.РегистрБухгалтерии1.Добавить();
	Движение.ВидДвижения=ВидДвиженияБухгалтерии.Кредит;
	Движение.Счет=ПланыСчетов.МПланСчетов.Пассивный1;
	Движение.Период = Дата;
	Движение.МКоличество = 70;

	Движение = Движения.РегистрБухгалтерии1.Добавить();
	Движение.ВидДвижения=ВидДвиженияБухгалтерии.Кредит;
	Движение.Счет=ПланыСчетов.МПланСчетов.АктИПасс;
	Движение.Период = Дата;
	Движение.МКоличество = 30;

}
А с поддержкой корреспонденции, запись выглядит так:
	Движение.СчетДт = ПланыСчетов.МПланСчетов.Пассивный1;
	Движение.СчетКт = ПланыСчетов.МПланСчетов.Активный1;
Там где есть корреспонденция, есть корреспондерующие обороты, точно с какого счета на какой. Без корреспонденции можно узнать дебет и кредит счета, но нельзя по нормальному узнать, как два счета связны, что на какой счет перешло. У корреспонденции будет доп таблица содержащая такие движения.


//--------------------------------------------------------
Если отменить проведение, то при пометке на удаление, проводки будут активными. Нужно при отмене проведения, если документ помечен на удаление, ставить "активность" проводок в ложь.
Неактивные проводки при пометке на удаление. 
ПередЗаписью ставим:
	Движение.РегистрБухгалтерии.Прочитать();
	Активность=Не ПометкаУдаления;
	Движения.РегистрБухгалтерии.УстановитьАктивность(Активность);
	Движения.РегистрБухгалтерии.Записать();
	
Бухгалтеры считают кварталами-полугодиями. У таблиц регистров бухгалтерии лучше ставить итоги по кварталу.
}

СообщениеПользователю{
СообщениеПользователю выводятся для того, чтобы сообщить пользователю об ошибках.
Для информирования о выполняемом действии рекомендуется использовать метод встроенного языка ПоказатьОповещениеПользователя().	

Если в форме присутствует реквизит формы с именем из свойства ПутьКДанным и его ссылка совпадает со значением свойства КлючДанных, делается попытка найти элемент формы связанный с данным реквизитом.
Если свойство КлючДанных заполнено, но в форме отсутствует реквизит с именем из свойства ПутьКДанным, то будет открыта новая форма объекта, в которую будут перенесены все сообщения с таким ключом данных (ссылкой или ключом записи регистра).

Сообщение = Новый СообщениеПользователю();
Сообщение.Текст = "В строке 11 табличной части ""Номенклатура"" не хватает ";
Сообщение.Поле = "Номенклатура[10].Количество";
// Привязка объекта к реквизиту формы "вручную"
Сообщение.КлючДанных = ОбъектДанных.Ссылка;
Сообщение.ПутьКДанным = "Объект";
Сообщение.Сообщить();
Тип	Шаблон	Пример
Реквизит	ИмяРеквизита	Контрагент
Табличная часть	ИмяТабличнойЧасти	Скидки
Реквизит табличной части	ИмяТабличнойЧасти[ИндексСтроки].ИмяРеквизита	Номенклатура[10].Количество
}

Проблема с записью документа в регистр{
У документа есть свойство: Удалять автоматически при отмене проведения. Таким образом, каждый раз при проведении в самом начале транзакции проведения система автоматически записывает пустые наборы записей в регистры, тем самым очищая старые движения.
Но это не меняет того, что каждый раз надо очищать движения ручками: если у движений в форме поставить галочку "Использовать всегда" тогда движения будут прочитаны и наборы записей в свойстве документа "Движения" не пустые, и добавление при проведении новых движений, как правило приводит к дублям движений.
Конкретный пример{
Создал док с табличной частью товар и количество.
Создал для док форму, в которой поставил галочку Движения Исползовать всегда.
Теперь в самом начале в "Движения.Поступило" содержаться прошлые записи. И если пойти обычным путем:
// регистр Поступило Приход
//Движения.Поступило.Записывать = Истина;
//Для Каждого ТекСтрокаПоступило Из Поступило Цикл
//	Движение = Движения.Поступило.Добавить();
//	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
//	Движение.Период = Дата;
//	Движение.Номенклатура = ТекСтрокаПоступило.Номенклатура;
//	Движение.Количество = ТекСтрокаПоступило.Количество;
//КонецЦикла;
То в движения, которые уже не пустые запишуться опять данные.
А если поставить:
НаборЗаписей=РегистрыНакопления.Поступило.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
Для Каждого ТекСтрокаПоступило Из Поступило Цикл
	Запись = НаборЗаписей.Добавить();
	Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
	Запись.Период = ТекущаяДата();
	Запись.Номенклатура = ТекСтрокаПоступило.Номенклатура;
	Запись.Количество = ТекСтрокаПоступило.Количество;
КонецЦикла;
НаборЗаписей.Записать(Истина);
То нифига не измениться. Не работает. Самое забавное, что в регистре записи заменяются. Но в итоге, записи из движений попадают в регистр. Почему, непонятно.
В тот момент, когда происходит:
НаборЗаписей.Записать(Истина);
В регистре запрос показывает правильные данные.
А если потом написать:
Движения.Поступило.Очистить();
То в регистр не попадет ни одна запись.
Однако, если не ставить галочку: "Использовать всегда" все работает так, как должно.
Если её не использовать, то все в порядке. Движения все время пустые, записи нормально формируются и ничто им не мешает.
Если не использовать, то на сервере ПриЗаписиНаСервере нельзя будет обратиться к Объект.Движения.Поступило;
}
Лучше всего записывать движения через движения.имяРегистра.добавить() или будут проблемы.
}

ИНДЕКСИРОВАТЬ ПО{
Конструкцию рекомендуется использовать по полям временных таблиц, по которым эта временная таблица будет соединяться с другими таблицами баз данных. Это существенно повышает скорость выполнения соединения таблиц.
"ВЫБРАТЬ
| Док.Товар КАК Товар,
| СУММА(Док.Количество) КАК Количество
|ПОМЕСТИТЬ ДокТЧ
|ИЗ
| Документ.Расходная.СписокТоваров КАК Док
|ГДЕ
| Док.Ссылка = &Ссылка
|
|СГРУППИРОВАТЬ ПО
| Док.Товар
|
|ИНДЕКСИРОВАТЬ ПО
| Товар
|;
}

Флаг блокировать для изменения{
Может не получиться воспользоваться флагом "БлокироватьДляИзменения" так как блокировка с этим флагом происходит в момент записи данных набора записей, а блок нужно поставить перед запросом, чтобы не было параллельного чтения данных.


}

ВременныеФайлы{
Есть функция: "ПолучитьИмяВременногоФайла()".
- Гарантирует, что имя файла будет действительно уникально;
- Если разработчик забудет удалить файл самостоятельно, то он обязательно удалится при следующем запуске платформы.
Если код выполняется на сервере, то нужно понимать, что сервер может долго не перезапускаться, а значит, папка temp будет забиваться ненужными файлами.
}

Заметки на будущее{

При записи документа выбираем: Движения.Записать();
Можно выбрать: Движения.ОстаткиТоваров.Записать(); но тут при большом наборе записей у документа нам нужно будет самим контролировать что и в каком порядке запишется в базу данных, можно будет попасть во взаимную блокировку, когда одна транзакция заблокирует таблицу А и будет ждать таблицу Б, а другая все наоборот сделает.
У документа обычно в свойствах в "Запись движений при проведении" стоит "Записывать выбранные". Тут надо будет написать для каждого регистра:
Движения.Поступило.Записывать = Истина;
Если не написать это то при свойства Записывать=Ложь; даже если и вызвать: Движения.ОстаткиТоваров.Записать(); то не запишется в базу.
При ложь не происходит записи набора в информационную базу при вызове Записать коллекции движений документа, которой принадлежит набор, а также при стандартной обработке проведения документа, если значение свойства метаданного документа "Запись движений при проведении" в Конфигураторе выставлено в "Записывать выбранные".
А метод Движения.Записать() запишет только те движения, у которых установлен флаг "Записывать". И все транзакции записываются в одинаковом порядке.

	*есть функция для получения названия субд таблицы для такого-то объекта 1С. Через нее 
Если зелезть в субд, то регистр накопления остатки создаст две таблицы.
В одной просто будут записи, как и при открытии регистра в 1С- для каждой строки одна записи.
А в другой для каждого измерения (допустим по товарам) сумма - это таблица итогов. По каждому набору измерения, будет итог.
Итог на текущую дату берется из таблицы итогов- быстро возьмет сразу и выдаст.
А если будет нужно брать остатки за период- по обычной таблице, будет пробегать и складывать все. Если данных много, это займет много времени.

Для ускорения выборки, чтобы все не обходить в таблицу итогов как-то можно включить период. В 1С:Предприятие есть "Все функции" - "Стандартные" - "управление итогами - полные возможности". Там есть максимально хранимый период итогов. Как-то в нее вроде можно залезть и в таблице итогов кроме текущих итогов появяться и дополнительные итоги за такой-то месяц.
Если поставить там дату + несколько лет допустим итоги до 2200г, чтобы постепенно заполнять итоги, и каждый месяц итоги расчитывались сами, при вводе любого значения, все итоги пересчитываются- чем больше дата, тем больше итогов будут пересчитываться.
Период расчитанных итогов лучше ставить конец месяца предшествующего текущему месяцу.
Если сейчас 8 месяц, то ставить на конец 7 месяца - последнее число прошлого месяца.

Виртуальные таблицы всегда максимально сгруппированы.

Если НЕ результатЗапроса.ПУСТОЙ() тогда отказ=Истина. Сначало проверяем запрос на пустоту, а не на существование выборки.

Новый Граница(МоментВремени(),ВидГраницы.Включая) -так можно установить параметр период для временной таблицы. Если поставить дату, то будет проблема с секундой, пропадет секунда, за которую может быть несколько документов. Если поставить МоментВремени - метод объекта и ссылки документа то будет проблема с движениями-движения идут за ним, МоментВремени не включит движения документа. Надо использовать границу, чтобы движения попали в виртуальную таблицу. Аккуратно надо быть с МоментовВремени при проведении. Если не нужно учитывать прошлые записи, то ставить МоментВремени, если надо то ставить Граница. 

У виртуальной таблицы, лучше заполнять параметр условие.  Если поставить условие на товар в списке, то список лучше в параметр условие передавать, иначе она все выберет, а потом отберет из списка.

При обработке списания по себестоимости сначало получим себестоимость, а потом запишем движения.

При создании регистра надо помнить, все что ресурсы должны сводиться в ноль. Если остатки, а у оборотного только обороты учитываются.

При принудительной записи: Движения.Записать() флаг у регистров: движения.Регистр.Записывать=Истина сброситься.

РасчетСебестоимости по СРЕДНЕМУ: в регистре итогов храниться количество и суммарная себестоимость товаров.
Допустим купили ложки:
	1 штуки 100р
	1 штук 200р
В регистре будет запись:
Ложка 2штуки 300р
И если продадим одну ложку, то её себестоимость будет: 1/2*300= 0.5 *300=150. Все сходится.
КоличествоПроданногоТовара / ОбщееКоличествоТовара * ВсюСуммарнуюСебестоимость.
Так мы найдем процент.
Если купили:
	2 ложки 100р	=200  р
	3 ложки 200р	=600  р
	4 ложки 300р	=1200 р
		= 9 штук	= 2000 р
А продали:
	1 ложку: 1/9* 2000=0.11*2000=222 р. Приблизительно 222.2222 рубля себестоимость ложки.
	4 ложки: 4 / 9 * 2000 = 0.4 * 2000 = 800 Приблизительно 800 рубля.
	
СебестоимостьДляСписания = (СписываемоеКоличество / КоличествоОстатока) * СебестоимостьОстатока

Что я хочу учесть-это ресурс. Если я хочу учесть количество - это реквизит.
По чему я хочу отчет- измерение. Если я хочу отчет в разрезе по складам.

Проблема с перепроведением и текущим оперативным моментом времени{
Если оперативно ПЕРЕпроводить проведенный документ, то будет проблема в строке:
Запрос.УстановитьПараметр("МоментВремени",МоментВремени());
Даже если поставить Граница исключая, не поможет- система видит, что мы кидает оперативный момент времени и забивает на таблицу-она берет данные из текущих итогов. А на них влияют движения этого документа.
Лучше сначало очищаться, перед чтением и в зависимости от режима очищать.
Если Режим=РежимПроведенияДокумента.Оперативный тогда Движения.Регистр.Записать(); КонецЕсли;



}

При перепроведении движения автоматически сами не удаляются. Если перепровести оперативно документ, в начале процедуры проведения можно запросом получить * из регистра и там будут его остатки. А Движения.Рег.Очистить(); просто очистит движения документа, в регистр она их не запишет.

В отчете есть возможность установить параметру тип "Стандартный период". Чертовски удобная вещь. Даже удобнее чем наш выбор периода в "Отгрузка а/м". Его можно и в значение реквизита пихать. Тип "Стандартный период" много где встречается. Сам он находится в синтаксис помошнике в разделе "Общие объекты".

В отчете, в системе компоновки данных, в последней вкладке настройки, где параметры, например Период, где их включают в пользовательские настройки, перед периодом есть галочка, эта галочка, отображает статус-состояние параметры, включен он или нет. Если стоит галочка, при открытии отчета, с настройками по умолчанию, там будет проставлена галочка. Если нет, то и у него не будет, он будет выключен.
}

Запросы{

ВЫБРАТЬ
        ОказаниеУслуг.Организация КАК Организация,
        ОказаниеУслуг.Номенклатура КАК Номенклатура,
        ОказаниеУслуг.СуммаДокумента КАК СуммаДокумента
ИЗ
        Документ.ОказаниеУслуг КАК ОказаниеУслуг
ИТОГИ //Итоги могут быть здесь.
        СУММА(СуммаДокумента)
ПО
        ОБЩИЕ,
        Организация,
        Номенклатура
//////////////////////////////////////
ИМЕЮЩИЕ
    СУММА(Оплата.Сумма) > 13000
Это having
	
 При соединении двух таблиц оптимизатор СУБД выбирает алгоритм соединения таблиц исходя из количества записей в обеих таблицах. В случае наличия вложенного запроса, определить количество записей, которое вернет вложенный запрос крайне сложно. Поэтому вместо вложенных запросов всегда стоит использовать временные таблицы. 

Итоги впереди -ОбходРезультатаЗапроса.ПоГруппировкам{
В есть таблица номенклатура, типНом количество.
Можно сделать запрос, который иерархически сгруппирует:
	Номенклатура				30
					типНом1		5
					типНом2		15
					типНом3		10
И через него можно будет обойти номенклатуры и внутри номенклатуры обойти типНомы, количество и все вложенное.
Формируем запрос, и в ЗАКЛАДКЕ "Итоги" выбираем группируемое поле.
В этом верхнем запросе будут только те поля, которые выбраны в "Итоги". Группируем по номенклатуре, и по количеству, чтобы можно было сумму количества увидеть. А типНом будет только у вложенного запроса виден.
"|ИТОГИ
		|	СУММА(КоличествоПроданного)
		|ПО
		|	Номенклатура"
Будет приблизительно так выглядеть конец запроса.
РезультатЗапроса=Запрос.Выполнить();
ВыборкаНоменклатура=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Ставим именно "ОбходРезультатаЗапроса.ПоГруппировкам".
Пока ВыборкаНоменклатуры.Следующий() цикл
	Номенклатура=ВыборкаНоменклатуры.Номенклатура;
	ВсегоНоменклатуры=ВыборкаНоменклатуры.КоличествоПроданного;
	ВыборкаПоПартиям=ВыборкаНоменклатуры.Выбрать();
	Пока ВыборкаПоПартиям.Следующий()
		ТипНом=ВыборкаПоПартиям.ТипНом;
	КонецЦикла;
КонецЦикла;
Тип ВыборкаНоменклатура будет "ВыборкаИзРезультатаЗапроса ". У него есть свойство количество, выбрать, уровень, сбросить...
}

Упорядочивание{
ВОЗР или УБЫВ .
---------------------------------
ВЫБРАТЬ
	Цены.Период КАК Период,
	Цены.Товар КАК Товар,
	Цены.Цена КАК Цена
ИЗ
	РегистрСведений.Цены КАК Цены
УПОРЯДОЧИТЬ ПО
	Цены.Период УБЫВ,
	Цены.Цена
---------------------------------
Если в упорядочивании несколько полей, тогда сначало записи будут упорядочены по первому полю, затем по второму полю...
}

ВЫБРАТЬ ПЕРВЫЕ Х и упорядочим по количеству- получим Х самых наибольшие значения.

В запросе может быть литерал ДАТАВРЕМЯ(2012,11,01) - год, месяц,день,час,минута,секунда. Его можно сравнивавать с датой.

ОБЪЕДИНИТЬ | ОБЪЕДИНИТЬ ВСЕ{
Требование одно: Одинакое кол-во столбцов(полей)
	ОБЪЕДИНИТЬ-уникальные записи возьмет. Это не группировка, это удаление дублей.
	ОБЪЕДИНИТЬ ВСЕ-просто объединяет и ничего не делает.
В самом верхнем запросе объединения указывается ПСЕВДОНИМ поля,
Под самым последним запросом можно написать итоги.
}

лучше делать временную таблицу, если к результатам запроса буду обращаться более одного раза.

Оптимизация регистр накопления по двум и более отборов{
Из регистра остатков хотим получить остаток товаров, которые есть в документе и по определенному складу.
Если в параметрах указать:
"Товар В (ВЫБРАТЬ Док.Товар ИЗ Док) И Склад=&" 
то расчет будет не оптимальным, сначало запрос переберет все товары, которые есть в документе и потом из них будет отдельно отбирать те, которые подходят по складу.
Лучше не двум циклами обходить, одним по товару, а другим по складу, а сразу выбирать те, которые подходят по складу и товару:
"(Товар,Склад) В (ВЫБРАТЬ Док.Товар,&Склад ИЗ Док КАК Док)"
Но если полей много, за 15, лучше сначало по трем сделать, а потом по оставшимся. Тут еще зависит от того, проиндексированы ли поля. Вдруг одно поле проиндексировано, а другое нет. К каждому запросу нужно подходить отдельно.
}

Оптимизация запроса с составными полями{
Если отчет на конец дня: "Новый Граница(ХХХ,ВидГраницы.Включая)" и если нужны движения документа-тогда включая. Если не нужны то исключая.
Если обращаемся к регистратору регистра или характеристики бух плана, то надо помнить, что это составные поля. Если обратиться к ним и попытаться взять что-то ("Регистратор.НомерТелефона") то будет построено левое соединение ко всем таблицам, которые входят в состав регистратора. При обращении к составному полю, будет использовано много соединений со всеми таблицами, будет очень долго выполняться. Нужно приводить к какому-нибудь типу значений.
"Регистратор.Номер" - это плохо.
"ВЫРАЗИТЬ Регистратор КАК Документ.РасходнаяНакладная).Номер" - хорошо
}

Майкрософт SQL профайлер - можно посмотреть план запроса.

Одна константа- одна таблица. Чтобы не блокировать строку.
Каждая точка- новое левое соединение.
}

Последовательность{
Теория зачем нужна вообще последовательность.{
	Есть документ приходная и расходная. 
Пришло 10 штук, пришло 10 штук, спиласи 20 штук, и после второй последовательности еще одну на 20 штук задним число вводим.
Запихнем после пары приходных задним числом расходную- от первых приходных есть остаток, провести можем. А этот же остаток списывался другой расходной. В итоге у нас отрицательный остаток.

Пришло 1 штука за 1 рубль, пришла 1 штука за рубль, списали 1 за 1 рубль.
Вводим после второй приходной еще одну штуку на 100р. И тут себестоимость не 2 за 2 рубля, а 3 за 102 рубля. И списать 1 за 1 рубль не можем.
После пары приходных и расходных, перед расходной запихнем еще одну приходную. Товара стало больше, среднее число возрасло,его себестоимость выросла, а списываем себестоимость черт знает какую, без учета новой приходной. 
}

Перемещение границы про проведнии - это имеется в виду, нужно ли вперед двигать границу. Назад она в любом случае будет двигаться. А вперед в этом случае нет. 
Это нужно потому ...{
Бухгалтер вводит документы. Он может вводить их любым числом и ему не важно, актуальная последовательность или нет.
Ему нужно чтобы в конце месяца, при закрытии месяца все было актуально. А в течении месяца все равно что там творится.
Создал документ ЗакрытиеМесяца, установил дату на конец месяца, и моментом времени программно провел- граница установлена на ДокументЗакрытиеМесяца.
}

Входящие документы- это те документы, которые должны быть перепроведены.
Другие документы могут влиять напоследовательность, но во входящих документах должны быть только те, которым критично последовательное проведение.
Пример выбора входящих документов{
Есть регистр накопления "Остатки Товаров".
В него входят "Приходная накладная" и "Расходная накладная".
Ставить во входящие надо ТОЛЬКО "Расходная накладная".
Хоть приходная тоже влияет на регистр, но в ней нет ни проверки остатков, ничего нет. Просто добавила в регистр товары. Зачем её перепроводить? Они могут как угодно вводиться с какими угодно значениями, это ни на что не влияет. При измении приходной, последовательность будет двигаться назад, если задним числом ввести приходную, на нее все сдвинется, но перепроводит приходные в порядке не надо. Двигать назад может, так как вляет на регистр, а вперед нет, и перепроводится не будет.
А вот в расходной есть и проверка товаров, если товаров нет, её нельзя проводить. Тут уже важно последовательное проведение. Её и добавляем в выходящие документы.
}

Движения влияющие на последовательность- те регистры, при изменении которых, надо проверять последовательность. Если какой-то документ изменил данные в регистре, или программно что-то в регистре изменили, граница последовательности должна измениться.

Измерения последовательности - те значения, по которым отдельно надо создавать последовательности, для которых будет своя граница последовательности. Допустим есть склад. Зачем перепроводить документы по складу "Основной", если было изменение на складе "Корп"? 
Если значений измерений будет меньше 10 тогда можно создавать, иначе нет.{
Можно создать измерение склад, и тогда в зависимости от того, какой склад изменился, те документы и будут проводиться. Складов мало, два-четыре. По каждому складу будет своя граница.
Можно по номенклатуре сделать- зачем проводить вилки, если изменилось поступление ложек? Но номенклатуры много, несколько сотен. И последовательности надо будет каждый раз вычислять, что из этих сотен изменилось, содержать сотни границ. Быстрее будет все документы провести.
}
Если измерения есть, по в границе последовательности будет отображаться только одна граница-самая маленькая, самая ранняя граница из всех границ по измерениям.

Чисто мои заметки во время решения задач по оперативному учету{
Последовательность учитывает не перероведение документа, а изменения регистра. Допустим есть приходная накладная от 1 января, а потом 10 января была расходная.
Входящие документы расходная,
регисты две штуки, в которых оба документа участвуют.
Если перепровести приходную, последовательность не измениться, хоть обпереводись, движения то в регистре не меняются. А вот если изменить число в приходной, и перевести, в регистре остатки будет другое уже число и граница на приходную упадет.	
}

}

Агрегаты{
Каждый агрегат-отдельная таблица оборотов, которая где-то в базе накапливается.
Либо итоги, либо агрегаты для регистра оборотов.
Агрегаты- сами создаем таблицу итогов для регистр оборотов.
В агрегате можем выбрать какие измерения будут в ней участвовать. Если не выбирать никакие измерения, то в агрегат не войдут измерения, и в нем просто сумма, количество и себестоимость будут накапливаться, без измерений.
Агрегаты система не трогает. Итоги автоматически дополняются и обновляются, а агрегаты нет. Чтобы они были актуальными, пользователю надо будет самому обновлять. Обороты используют в основном для прошлых месяцов, в них изменения редко задним числом вносят. Пользователь каждый месяц обновляет их и все.
Если установить по каждому измерению отдельный агрегат, и для каждой пары измерений свой агрегат, агрегатов будет черт знает сколько и система не будет все испольвать, система сама выбирает, какие агрегаты использовать, для этого можно попробовать перестроить агрегаты - чтобы система на основании истории запросов сама могла выявить оптимальные агрегаты.
Перестроение агрегатов может занимать черт знает сколько времени, хоть сутки, и не надо каждый месяц перестраивать их.

В оборотных регистрах с кучей измерений агрегаты быстрее итогов. Хоть формирование и займет пару дней, но отчеты намного быстрее будут делаться.
}

Возможный вариант запроса для себестоимости для отчета по продажам{
Нужно:
	Товар | кол-во | себестоимость | Продажа | Выручка
	Товар | партия | количество | себестоимость
Такие и делаем ресурсы с одним измерением Товар.
Итог:
К черту оптимизацию. Создаем регистр "ТОЛЬКО ОСТАТКИ", с измерением товар и количеством. Вопрос решен.
И в зависимости от задания создаем регистр "Детальные остатки", где уже будет себестоимость, номенклатура и прочее.
}

Программные блокировки ( не объектные, транзакционные блокировки){
Автоматические блокировки
Управляемые блокировки
Автоматические и управляемые блокировки.
Блокировка нужна, чтобы никто не мог читать данные, которые я собираюсь изменить.

Можно в запросе выбрать таблицу, которую нужно заблокировать. Но проблема в том, что мы сначало записываем движения, а потом их блокируем. Не факт, что этот блок вовремя сработает.

У регистра надо снять галочку "Разрешить разделение итогов", оно в основном нужно для ПриходнаяНакладная, чтобы две можно было одновременно записывать в регистр. Суть в том, что в таблице итогов появиться поле "Разделитель", в итоги запишутся две строки с одним измерением так же как и в обычную таблицу. А потом все это будет сжиматся.

Блокировки устанавливаются не субд, а сервером 1С предприятие. 
У движений есть флаг: БлокироватьДляИзменения =Истина. Когда происходит запись (Движения.Записать() например) в тот момент и устанавливается блок.

До запроса установим блокировку:
Блокировка=Новый БлокировкаДанных;//Таблица строк, которая описывает, что блокируем. Справочник там или регистр.
ЭлементБлокировки=Блокировка.Добавить("РегистрНакопления.СтоимостьТоваров");//Это строка таблицы. В которой указано, что мы блокируем.
ЭлементБлокировки.Режим=РежимБлокировкиДанных.Исключительный;//Исключительный не позволяет установить на эти данные другие блокировки, а Разделяемый позволяет еще один разделяемый установить.
ЭлементБлокировки.ИсточникДанных=СписокТоваров//Список товаров это табличная часть, Источник данных указывает из какой таблицы брать данные.
ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Товар","Товар")//Из ИсточникаДанных берем первое поле "Товар", и блокируем в регистре второе поле "Товар". Может в регистре это называется Номенклатура, тогда будет ("Товар","Номенклатура")
//Возможно будет еще УстановитьЗначение
ЭлементБлокировки.УстановитьЗначение("Склад",Склад)//В поле регистра "Склад", установим значение Склад. Если в документе есть реквизит Склад, и его надо в регистр занести.-это установка блокировки.Отбор блокировки по такому-то складу.: Для поля регистра "Склад" установить отбор для блокировки взяв значение Склад из документа. Так можно отбор на партию установить.
Блокировка.Заблокировать();

При неопретивном проведении, пользователь может сменить стол на ложку и перепровести. Нужно и стол блокировать и ложку. В общем заблокировать лучше вообще всю таблицу. Или:
Движения.СтоимостьТовар.Очистить();
Движения.БлокироватьДляИзменения=Истина;
Движения.Записать();
Тут при очищенном и блокировке заблокируются и те движения, которые были и те, которые запишем.
}

Тестирование{
В синтаксисе помошнике в "Общие объекты" есть раздел: "Автоматизированное тестирование", там можно тестировать програмно:
ТестовоеПриложение = Новый ТестируемоеПриложение();
Можно с особыми ключами запустить 1С и как-то тестить.
Или через "Сервис"-> "Запустить для записи журнала пользователя" запустить 1С, который запомнит все нажатия и открытия и сохранит это в XML файл. 
Потом этот файл можно будет преобразоать в програмный код. Есть для этого обработка, в нее вставляешь содержимое хмл и она дает код:
Пример{
Что я делал{
Зашел в документ, нажал на команду1 и нажал провести и закрыть.
}
Файл хмл{
<?xml version="1.0" encoding="UTF-8"?>
<uilog xmlns:d1p1="http://v8.1c.ru/8.3/uilog">
	<ClientApplicationWindow isMain="true">
		<CommandInterface>
			<CommandInterfaceGroup title="Панель функций текущего раздела">
				<CommandInterfaceButton title="Документ1">
					<click/>
				</CommandInterfaceButton>
			</CommandInterfaceGroup>
		</CommandInterface>
	</ClientApplicationWindow>
	<ClientApplicationWindow caption="Документ1">
		<Form title="Документ1">
			<FormGroup name="ФормаКоманднаяПанель" title="Командная панель">
				<FormButton name="ФормаСоздать" title="Создать">
					<click/>
				</FormButton>
			</FormGroup>
		</Form>
	</ClientApplicationWindow>
	<ClientApplicationWindow caption="Документ1 (создание)">
		<Form title="Документ1 (создание)">
			<FormButton name="Команда1" title="Команда1">
				<activate/>
				<click/>
			</FormButton>
			<FormGroup name="ФормаКоманднаяПанель" title="Командная панель">
				<FormButton name="ФормаПровестиИЗакрыть" title="Провести и закрыть">
					<click/>
				</FormButton>
			</FormGroup>
		</Form>
	</ClientApplicationWindow>
</uilog>
}
Получившийся код{
&НаКлиенте
Процедура ТестовыйСценарий_30_07_2018(ТестовоеПриложение)

	ОкноПриложенияОсновноеКнопкаКомандногоИнтерфейсаДокумент1Нажать(ТестовоеПриложение);
	ОкноПриложенияДокумент1КнопкаСоздатьНажать(ТестовоеПриложение);
	ОкноПриложенияДокумент1СозданиеКнопкаПровестиИЗакрытьНажать(ТестовоеПриложение);

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеКнопкаКомандногоИнтерфейсаДокумент1Нажать(ТестовоеПриложение)
	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновноеCommandInterface = ОкноПриложенияОсновное.ПолучитьКомандныйИнтерфейс();
	КнопкаКомандногоИнтерфейсаДокумент1 = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), "Документ1");
	КнопкаКомандногоИнтерфейсаДокумент1.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияДокумент1КнопкаСоздатьНажать(ТестовоеПриложение)

	ОкноПриложенияДокумент1 = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Документ1", , 30);
	ОкноПриложенияДокумент1ФормаДокумент1 = ОкноПриложенияДокумент1.НайтиОбъект(Тип("ТестируемаяФорма"), "Документ1");
	КнопкаСоздать = ОкноПриложенияДокумент1ФормаДокумент1.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Создать");
	КнопкаСоздать.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияДокумент1СозданиеКнопкаПровестиИЗакрытьНажать(ТестовоеПриложение)

	ОкноПриложенияДокумент1Создание = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Документ1 (создание)", , 30);
	ОкноПриложенияДокумент1СозданиеФормаДокумент1Создание = ОкноПриложенияДокумент1Создание.НайтиОбъект(Тип("ТестируемаяФорма"), "Документ1 (создание)");
	КнопкаКоманда1 = ОкноПриложенияДокумент1СозданиеФормаДокумент1Создание.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Команда1");
	КнопкаКоманда1.Активизировать();

	КнопкаКоманда1.Нажать();

	КнопкаПровестиИЗакрыть = ОкноПриложенияДокумент1СозданиеФормаДокумент1Создание.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Провести и закрыть");
	КнопкаПровестиИЗакрыть.Нажать();

КонецПроцедуры




}
}

}

Прочитать:
А.П. Габец, Д.В. Козырев, Д.С. Кухлевский, Е.Ю. Хрусталева
Реализация прикладных задач в системе "1С:Предприятие 8.2
https://its.1c.ru/db/pubapplied

Экзамен{

Оценка экзамена{
Экзамен оценивается по пятибальной системе. Тебе дается пять баллов и из них вычитают ошибки:
1.5 балла стоит: Получение итоговой информации через прямоге обращения к реальным таблицам регистра без необходимости.
1   балл стоит: использование Дата в проведении документа, при получении запросом данных. Нужно использовать или МоментВремени() или Граница с МоментВремени().
2   балла стоит: Не использование параметров виртуальной таблицы. Или использование вместо них условия "Где".
0.5 балла стоит: В документе при дублировании строк (номенклатуры...) проведение меняется.
1   балл стоит: Неи проверки на Null.
}

1: Оперативный учет 1.2: Божественный пример запроса с выбором. Если партия=НужнаяПартия тогда 1 иначе 0 как порядокПартий. И упорядочиваем сначало по этому виртуальному полю запроса порядокПартий, а потом по партиям.моментвремени.
2: В приходной могут быть услуги.
|ГДЕ ПриходнаяНакладнаяСписокНоменклатуры.Ссылка = &Ссылка И (НЕ ПриходнаяНакладнаяСписокНоменклатуры.Номенклатура.Услуга)
3: Метод списания может быть не задан. Нужно убедится, что он есть. 
МетодСписания = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).МетодСписания;
Если МетодСписания.Пустая() Тогда
4: При копировании бухДокумента, которые ручками формирует проводки, надо убедиться, что у нового тоже будут такие-же проводки.
5: При пометке на удаление нужно убедится, что активность у проводок станет ложь.6
6: СортировкаПартий = ?(МетодСписания = Перечисления.УчетнаяПолитика.ФИФО, "", " УБЫВ"); и просто в запросе сложить эту строку с текстом запроса до и после.
7: проверить, что управление блокировкой в конфигурации "Управляемый"
8: Если явно не сказано, что учетная политика изменяется документом, просто делаем в подсистеме регистр явным.
9: не делаем регистр чисто для остатков. Используем регистр сразу с себестоимостью. Просто:
// Контроль остатков
Если (НЕ ВыборкаНоменклатура.Услуга) И (ВыборкаНоменклатура.Количество > ВыборкаНоменклатура.КоличествоОстаток) Тогда
	Отказ = Истина;
	Сообщение.Сообщить();
КонецЕсли;
Если Отказ Тогда
	Продолжить;
КонецЕсли;
10: не создаем продажи в каждом прохоже, если в этом нет особой необходимости. Себестоимость так рассчитаем:
ТекСебестоимость = 0;
Если не ВыборкаНоменклатура.Услуга Тогда
	//формируем движения по остаткам.
	ТекСебестоимость = ТекСебестоимость + Движение.Стоимость;
    ОсталосьСписать = ОсталосьСписать - Списываем;
КонецЕсли;
// регистр Продажи
Движение = Движения.Продажи.Добавить();
Движение.Себестоимость = ТекСебестоимость;
11: В отчете по продажам используем параметр Период с типом СтандартныйПериод. Тогда началоПериода=&Период.ДатаНачала а конецПериод=&Период.ДатаОкончания.
12: Пользователь может выбрать что угодно. Дублирующиеся строки, одна номенклатуры на две разные партии, учесть все.
13: (Номенклатура,Партия) В (Выбрать ДокТЧ.Номенклатура, ДокТЧ.Партия из ДокТЧ);
14: Списание по средней: документ устанавливающий среднее списывание должен схлопнуть все партии:
чтобы остатков по партиям не было:{
ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Пока ВыборкаНоменклатура.Следующий() Цикл

ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();

Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

	// регистр ОстаткиНоменклатуры Расход
	Движение = Движения.ОстаткиНоменклатуры.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
	Движение.Партия = ВыборкаДетальныеЗаписи.Партия;
	Движение.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
	Движение.Стоимость = ВыборкаДетальныеЗаписи.СтоимостьОстаток;

КонецЦикла;

// регистр ОстаткиНоменклатуры Приход
Движение = Движения.ОстаткиНоменклатуры.Добавить();
Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
Движение.Период = Дата;
Движение.Номенклатура = ВыборкаНоменклатура.Номенклатура;
Движение.Количество = ВыборкаНоменклатура.КоличествоОстаток;
Движение.Стоимость = ВыборкаНоменклатура.СтоимостьОстаток;

КонецЦикла;
}


}


Вывод произволого макета в произвольном месте схемы компоновки данных : сделать вверху нормальный заголовок, как на примере экзамена с параметром и прочим{
Нужно вывести допустим шапку отчета: "Отчет с такогоТо по такойТО, сформирован тогдаТо".
1. Создаем в схеме новую группировку без указания поля (детальные записи)
2. Установим имя группировке
3. Удалим у данной группировки из выбранных полей автополе
4. В других настройках выберем макет оформления "Без оформления" (иначе на наш макет может наложится стандартный макет и вокруг всех ячеек будт рамка)
5. На вкладке макеты добавляем наши данные
6. Добавляем макет группировки и указываем наше имя группировки из п.2 и указываем область с нашими данными
7. ставим этой областе "Тип заполнения ячейки: шаблон" и пишем что-то типо: "Произвольный заголовок с [Начало] по [Конец];" и внизу в параметрах появяться два параметра: "Начало" и "Конец".
}

Что есть интересного в Бухгалтерия предприятия редакция 3.0 демо{
Все по черному раскидано по модулям. В обработке проведения нет проведения-все проведение выполняется в модулях. Создается общий модуль, в него кидает проведение и движения. Проведения раскиданы черт знает как и черт знает где.
Создал себе нового пользователя, добавил ему роль со всеми включенными правами, при заходе показывает окно: "Авторизация не выполнена, работа системы будет завершена".{
	Глобальный поиск нашел, что в ОбщийМодуль.ПользователиСлужебный.Модуль(4455,22) происходит проверка и возврат.
	
При начале работы действия перекидывает в:
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
Огромные модули, не понял в чем проблема. И почему недостаточно прав, если все права установлены. Добавление таких-же ролей как и у админа не помогло.
}

Аналог приходной накладной{
	документ: "РеализацияТоваровУслуг". Синоним: "Реализация (акты, накладные)".
Форма: "ФормаДокументаТовары" - именно в ней происходит выбор товаров в табличную часть, указание склада, организации, договора.
В ней есть контроль кол-ва -  при указании большого кол-ва происходит отказ от проведения с сообщением что нехватает столько-то.
ИПМПЗ так по идее называется регистр, в котором идет учет кол-ва товаров.
}

Как реализована БлокировкаДанных{
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ИПИныеМатериальныеРасходы");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных =
		ПодготовитьИсточникДанныхБлокировки(СтруктураПараметров, Материалы, ОписаниеИсточника);
	Для каждого КолонкаИсточника Из ОписаниеИсточника Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаИсточника.Ключ, КолонкаИсточника.Значение);
	КонецЦикла;
	Блокировка.Заблокировать();
}

Огромные модули, все черт знает где раскидано. Активное использование общих модулей.
}

Один показатель-один регистр.
Если я проведу сегодня документ и если проведу завтра или через год- результат должен быть один и тот же. Любой коэффициент учитывать в разрезе времени. Информация которая нужна для проведения, должна храниться в документе. Как курс валют например, значение коэффициента (например контейнер=10 штук, пачка = 5 штук).

Правильная проверка были ли изменения в документе/справочнике{
В обработчике ПриЗаписи, то, разумеется, считывание данных из базы данных не подходит, так как информация в базе данных уже изменена.
Проверку надо проводить в обработчике ПередЗаписью.
Для того чтобы узнать, что изменилось, надо считать данные из базы и сравнить с текущими ДатаДокумента = Ссылка.Дата;.
В каждой транзакции свой кэш и по этому, при обращение по ссылке, считаются все данные. Если надо проверить два реквизита, то лучше использовать запрос.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ДатаДокумента <> Ссылка.Дата Тогда 
			Сообщить("Дата изменена");
	КонецЕсли; 
Можно попробовать считывание выполнять в обработчике ПередЗаписью и запоминать считанные значения в переменных модуля. А уже анализ выполнять в обработчике ПриЗаписи.
Пример{
Для товара создал подчиненный справочник с коэффициентами: пачка это 8 штук, стая это 4 штуки, контейнер это 20 штук. Чтобы можно было в разрезе самопридуманных измерений учитывать товары. Но при проведении документа, надо же сохранять где-то значения. 
Док от десятого(10) января, первого(1) января пачка равнялась 8 штукам, а 30 января уже 10. Каждый раз если делать в документе запрос, значение коэффициента при проведении потом изменится с 8 до 10. Хочу сохранить это в регистре сведений.
Флаг модифицированности использовать не хочется- он же не учитывает измерения, он учитывает делалось ли что-то. Допустим я залез в коэффициент и поправил 8 на 16, покликал по коду, наименованию и сменил 16 на 8. Изменений не было-все как было, так и осталось, а флаг модифицированности есть. Лучше по ссылке проверить или запросом:
&НаСервере
Функция БылиИзменения()
Если Ссылка.Наименование <> Наименование или
		Ссылка.Код <> Код или
		Ссылка.Количество <> Количество или
		Ссылка.Владелец <> Владелец тогда
	возврат Истина;
Иначе 
	возврат ложь;
КонецЕсли;		
КонецФункции

//Перед записью делаю проверку и при записи тогда создам запись в регистре. 
Перем БылиЛиИзменения;
Процедура ПередЗаписью(Отказ)
	Если БылиИзменения() тогда		
		БылиЛиИзменения=Истина;				
	Иначе
		БылиЛиИзменения=Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если БылиЛиИзменения тогда
		НаборЗаписей=РегистрыСведений.ИсторияИзмененийЕдиницИзмерений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЕдиницаИзмерения.Установить(Ссылка);
		Запись=НаборЗаписей.Добавить();
		Запись.ЕдиницаИзмерения=Ссылка;
		Запись.Период=ТекущаяДата();
		Запись.Коэффициент=Количество;
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
КонецПроцедуры

Если были изменения, то запишет их. Уникальность идет по дате записе (Период) и по Ссылке на справочник (Единица измерения).
}
}

Редактирование регистров вручную{
Наткнулся на забавный заголовок в " Методическая поддержка для разработчиков и администраторов 1С:Предприятия 8":
"Редактирование регистров вручную"
https://its.1c.ru/db/metod8dev#content:2730:hdoc В нем первая же строка:
В 1С:Предприятии 8 существует возможность организовать в форме редактирование пользователем записей любого регистра, в том числе, и для подчиненного регистратору. Данная возможность соответствует общему подходу, принятому в 1С:Предприятии 8 в отношении модификации записей регистров. Система допускает и программное, и интерактивное изменение записей регистра без какого-либо участия регистратора (документа).  Для выполнения таких изменений достаточно указать только ссылку на регистратор, чтобы определить значение отбора записей регистра.

Это позволяет предоставить пользователю или администратору системы возможность отражения в регистре операций, для которых не предусмотрено в конфигурации специального документа. Потом в зависимости от ситуации, можно запретить проводить документ, если его движения вручную были удалены.

Описан он тут чертовски геморно. Проще создать форму и динамическим списком, указывающим на основную таблицу регистра накопления и в ней все изменять.
Суть в том, что они предлагают сделать в форме документа отдельную таблицу с движениями и в ней создавать движения, тогда при проведении документа, установяться эти движения из этой таблицы автоматически с отбором по этому документу.
Проще для отдельного регистра создать динамический список, и отдельно реквизиты с необходимым типом, чтобы в них указывать значения, которые будут записаны в выбранную строку динамического списка{
Есть динамический список: реквизит1.
Есть еще реквизиты:
	Количество-число;
	Товар-ссылка на справочник номенклатуры
	Период-датавремя;
Заполняем их, кликаем по какой-нибудь строке и нажимаем команду Перезаписать. Найдется в регистре запись с такими же полями и перезапишется.
&НаСервере
Процедура ПерезаписатьНаСервере(Структура)
	НаборЗаписей=РегистрыНакопления.ОстаткиТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Структура.Регистратор);
	НаборЗаписей.Прочитать();
	Для каждого запись из НаборЗаписей цикл
		Если этоВыбраннаяЗапись(запись,структура) тогда
			запись.Период=Период;
			запись.Количество=Количество;
			запись.Товар=Товар;
			НаборЗаписей.Записать(Истина);
			возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Перезаписать(Команда)
	Структура=Элементы.Реквизит1.ТекущиеДанные;
	ПерезаписатьНаСервере(Структура);
КонецПроцедуры

&НаСервере
Функция этоВыбраннаяЗапись(запись,структура)
	Если 
		запись.Период=Структура.Период и
		запись.Регистратор=Структура.Регистратор и
		запись.Товар=Структура.Товар и 
		запись.Количество=Структура.Количество 
	тогда
		возврат Истина;
	Иначе
		возврат Ложь;
	КонецЕсли;
КонецФункции
}

}

ПередЗаписью - для изменения объекта,
ПриЗаписи - для изменения других объектов.

Расчетные задачи{
План видов расчета | Регистр расчета

Вид расчета рассчитывает за определенный период. Такой период называют "базовым".
При расчета необходимо знать сумма накопленную за базовый период. 
Такую зависимость называют: "Зависимостью по базовому периоду"

}



